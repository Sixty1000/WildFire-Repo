/*create global threshold for maximum temperature
 *create global bool val for passed threshold
 *create volatile var for temperature
 *create function for light and RGB
 *create function that takes in input bool and returns void -- purpose is to cause output buzz on buzzer
 *configure ADC_init and set output pin to light (take code from RGB project
 *compare function for given val from temp sense and threshold --> returns bool val
 *Green && Red --> non-scanning phase
 *Green --> safe area
 *Yellow --> potentially dangerous
 *Red --> dangerous
*/

#include <stdlib.h>
#include <string.h>
#include <Screen_HX8353E.h>
#include <Terminal12e.h>
#include <Terminal6e.h>
#include <Terminal8e.h>
#include <gpio.h>

//made up threshold val *can change later*
float upper_threshold = 87.00;
float lower_threshold = 85.00;
volatile uint8_t temp = 120;
int input = 0;
int count = 0;
int pressed = 0;

//thermal function that activates input above certain threshold 
int thermal(float temperature){
  int ret;
  if(temperature > upper_threshold){
    ret = 2;
  } else if(temperature > lower_threshold){
    ret = 1;
  } else{
    ret = 0;
  }

  return ret;
}



void RGB_output(uint8_t count){
  if(count == 0) {
    GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0 |GPIO_PIN2);
    GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
    GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1);
  } else if(count == 1) {
    GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN2);
    GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
    GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN0 | GPIO_PIN1);
  } else if(count == 2) {
    GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1 |GPIO_PIN2);
    GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
    GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN0);
  } else {
    GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0 |GPIO_PIN2);
    GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1);
    GPIO_setOutputHighOnPin(GPIO_PORT_P1, GPIO_PIN0);
  }
}

void setup() {
  
  GPIO_setAsInputPinWithPullUpResistor(GPIO_PORT_P1, GPIO_PIN1);
  GPIO_setAsOutputPin(GPIO_PORT_P2, GPIO_PIN0 | GPIO_PIN1 | GPIO_PIN2);
  GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0 | GPIO_PIN1 | GPIO_PIN2);
  Serial.begin(115200);

}

void loop() {
  //to work requires button to be pressed in to work 
  //**change this so either systick or some other input value whenever the drone is in scanning phase**

  int sensorValue = analogRead(A3);
  float temp_C = ((3.3*sensorValue/1023.0))/.01;
  float temp_F = temp_C*(9.0/5.0)+37.0;
  
  
  
  if((GPIO_getInputPinValue(GPIO_PORT_P1, GPIO_PIN1) == 0)){
    if(pressed == 1){
      Serial.print("temp: ");
      Serial.print(temp_F);
      Serial.println();
      //change 120 to actual input value from thermal sensor
      input = thermal(temp_F);
      RGB_output(input);
      pressed = 0;
    }
  } else{
    input = -1;
    RGB_output(input);
    pressed = 1;
  }
  
}
