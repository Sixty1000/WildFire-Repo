#include "Romi_Motor_Power.h"
/* Defines pin configuration of robot */
#include "RSLK_Pins.h"
#include "SimpleRSLK.h"
#include "Energia.h"
#include <SPI.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <string.h>
#include <Screen_HX8353E.h>
#include <Terminal12e.h>
#include <Terminal6e.h>
#include <Terminal8e.h>
#include <gpio.h>


uint8_t IO_button = 1;


float upper_threshold = 87.00;
float lower_threshold = 85.00;
volatile uint8_t temp = 120;
int input = 0;
int count = 0;
int pressed = 0;


// your network name also called SSID
char ssid[] = "adrianiphone";
// your network password
char password[] = "adrian123";
// MQTTServer to use
char server[] = "io.adafruit.com";

void callback(char* topic, byte* payload, unsigned int length) {

  // Type Cast Input Bytes to Char
  char* str = (char*)payload;
  if (str[1] == 'F') {
    Serial.println("OFF");
    IO_button = 1;
  }
  else if (str[1] == 'N') {
    Serial.println("ON");
    IO_button = 0;
  }
}



//thermal function that activates input above certain threshold
int thermal(float temperature) {
  int ret;
  if (temperature > upper_threshold) {
    ret = 2;
  } else if (temperature > lower_threshold) {
    ret = 1;
  } else {
    ret = 0;
  }

  return ret;
}



void RGB_output(uint8_t count) {
  if (count == 0) {
    GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0 | GPIO_PIN2);
    GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
    GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1);
  } else if (count == 1) {
    GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN2);
    GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
    GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN0 | GPIO_PIN1);
  } else if (count == 2) {
    GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1 | GPIO_PIN2);
    GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
    GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN0);
  } else {
    GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0 | GPIO_PIN2);
    GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1);
    GPIO_setOutputHighOnPin(GPIO_PORT_P1, GPIO_PIN0);
  }
}

WiFiClient wifiClient;
PubSubClient client(server, 1883, callback, wifiClient);


Romi_Motor_Power left_motor;
Romi_Motor_Power right_motor;
int8_t status;


void leftturn() {
  left_motor.enableMotor();
  right_motor.enableMotor();
  left_motor.setSpeed(20);
  right_motor.setSpeed(20);
  left_motor.directionBackward();
  right_motor.directionForward();
}


void rightturn() {
  for (int i = 0; i < 150; i++) {
    left_motor.enableMotor();
    right_motor.enableMotor();
    left_motor.setSpeed(20);
    right_motor.setSpeed(20);
    left_motor.directionForward();
    right_motor.directionBackward();
  }
}

void forward() {
  for (int i = 0; i < 1000; i++) {
    left_motor.enableMotor();
    right_motor.enableMotor();
    left_motor.setSpeed(20);
    right_motor.setSpeed(20);
    left_motor.directionForward();
    right_motor.directionForward();
  }
}

void stopturn() {
  left_motor.disableMotor();
  right_motor.disableMotor();
  left_motor.setSpeed(0);
  right_motor.setSpeed(0);
  //pressed = 1;
}

void setup() {
  Serial.begin(115200);

  left_motor.begin(MOTOR_L_SLP_PIN, MOTOR_L_DIR_PIN, MOTOR_L_PWM_PIN);
  right_motor.begin(MOTOR_R_SLP_PIN, MOTOR_R_DIR_PIN, MOTOR_R_PWM_PIN);

  // Start Ethernet with the build in MAC Address
  // attempt to connect to Wifi network:
  Serial.print("Attempting to connect to Network named: ");
  // print the network name (SSID);
  Serial.println(ssid);
  // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    // print dots while we wait to connect
    Serial.print(".");
    delay(300);
  }

  Serial.println("\nYou're connected to the network");
  Serial.println("Waiting for an ip address");



  while (WiFi.localIP() == INADDR_NONE) {
    // print dots while we wait for an ip addresss
    Serial.print(".");
    delay(300);
  }

  Serial.println("\nIP Address obtained");
  // We are connected and have an IP address.
  // Print the WiFi status.
  printWifiStatus();
}

void loop() {
  while (!client.connected()) {
    Serial.println("Disconnected. Reconnecting....");

    if (!client.connect("energiaClient", "s1d", "aio_WABq27zUh4FjpaNRmuT2ueUmsIuX")) {
      Serial.println("Connection failed");
    } else {
      Serial.println("Connection success");
      if (client.subscribe("s1d/feeds/toggleRSLK")) {
        Serial.println("Subscription successfull");
      }
    }
  }
  if ((IO_button == 1)) {
    // Check if any message were received
    // on the topic we subscribed to

    stopturn();
  }

  if ((IO_button == 0)) {
    // Reconnect if the connection was lost

    // Check if any message were received
    // on the topic we subscribed to
    for (int i = 0; i < 4; i++) {
      forward();
      rightturn();

    }
    stopturn();

    int sensorValue = analogRead(A3);
    // convert the analog reading (0 to 1023) to voltage (0 - 5V)
    float voltage = (float)sensorValue * 5.0;
    voltage /= 1024.0;

    // print out the voltage to Omega2
    Serial.print(voltage); Serial.println(" volts");

    // convert voltage to degree Celsius including the 500mV offset adjustment
    float temperatureC = (voltage - 0.5) * 100;
    Serial.print(temperatureC); Serial.println(" degrees C");

    // convert from Celsius to Fahrenheit and print to Omega2
    float temperatureF = (temperatureC * 9.0 / 5.0) - 270;
    Serial.print(temperatureF); Serial.println(" degrees F");

    //change 120 to actual input value from thermal sensor
    input = thermal(temperatureF);
    RGB_output(input);




  }



  client.poll();
}

void printWifiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your WiFi IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
}
